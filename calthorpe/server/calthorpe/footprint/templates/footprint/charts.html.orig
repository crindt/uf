<!DOCTYPE html>
<meta charset="utf-8">
<head>
        <title>Stacked and Grouped Bar with Animation</title>
        <!--modified from http://bl.ocks.org/3943967-->
<style>

    body {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        margin: auto;
        position: relative;
        width: 960px;
    }
    h1 {
        font-size: 40px;
        font-weight: 300;
        letter-spacing: -2px;
        margin: .3em 0 .1em 40px;
    }
    h2 {
        text-align: right;
        margin: 0px 30px 0px 0px;
    }
    text {
        font: 20px sans-serif;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: black;
        shape-rendering: crispEdges;
    }

    form {
        position: absolute;
        right: 10px;
        top: 10px;
    }
    .legend {
        background-color: #fff;
        width: 300px;
        height: 60px;
        border: 1px solid #bbb;
        margin: 10px;
    }

</style>
</head>
<body>
<h1>Stacked to Grouped Bar Chart</h1>

<form>
    <label><input type="radio" name="mode" value="grouped"> Grouped</label>
    <label><input type="radio" name="mode" value="stacked" checked> Stacked</label>
</form>
<div>
    <h2>Legend</h2> <br>
</div>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="{{ STATIC_URL }}csv/sampledata.js"></script>
<script src="{{ STATIC_URL }}csv/colorlegend.js"></script>

<script>

var sampledata = [
    [
        { "dwellingunittype": "single-family", "scenarioname":"base", "x": 0, "y": 9},
        { "dwellingunittype": "attached single-family","scenarioname":"scenario1", "x": 1, "y": 29},
        { "dwellingunittype": "detached single-family","scenarioname":"scenario2","x": 2, "y": 30},
        { "dwellingunittype": "multifamily","scenarioname":"scenario3","x": 3, "y": 35},
        { "dwellingunittype": "yurt","scenarioname":"scenario4","x": 4, "y": 10}
    ],
    [
        { "dwellingunittype": "single-family","scenarioname":"base", "x": 0, "y": 25},
        { "dwellingunittype": "attached single-family","scenarioname":"scenario1", "x": 1, "y": 30},
        { "dwellingunittype": "detached single-family","scenarioname":"scenario2","x": 2, "y": 40},
        { "dwellingunittype": "multifamily","scenarioname":"scenario3","x": 3, "y": 12},
        { "dwellingunittype": "yurt","scenarioname":"scenario4","x": 4, "y": 12}
    ],
    [
        { "dwellingunittype": "single-family","scenarioname":"base", "x": 0, "y": 30},
        { "dwellingunittype": "attached single-family","scenarioname":"scenario1", "x": 1, "y": 12},
        { "dwellingunittype": "detached single-family","scenarioname":"scenario2","x": 2, "y": 28},
        { "dwellingunittype": "multifamily","scenarioname":"scenario3","x": 3, "y": 16},
        { "dwellingunittype": "yurt","scenarioname":"scenario4","x": 4, "y": 16}
    ],
    [
        { "dwellingunittype": "single-family","scenarioname":"base", "x": 0, "y": 25},
        { "dwellingunittype": "attached single-family","scenarioname":"scenario1", "x": 1, "y": 39},
        { "dwellingunittype": "detached single-family","scenarioname":"scenario2","x": 2, "y": 30},
        { "dwellingunittype": "multifamily","scenarioname":"scenario3","x": 3, "y": 25},
        { "dwellingunittype": "yurt","scenarioname":"scenario4","x": 4, "y": 16}
    ],
    [
        { "dwellingunittype": "single-family","scenarioname":"base", "x": 0, "y": 6},
        { "dwellingunittype": "attached single-family","scenarioname":"scenario1", "x": 1, "y": 29},
        { "dwellingunittype": "detached single-family","scenarioname":"scenario2","x": 2, "y": 30},
        { "dwellingunittype": "multifamily","scenarioname":"scenario3","x": 3, "y": 30},
        { "dwellingunittype": "yurt","scenarioname":"scenario4","x": 4, "y": 40}
    ]
];



{#    var sampledata = [#}
{#        [#}
{#            { "x": "base", "y": 9},#}
{#            { "x": "scenario1", "y": 29},#}
{#            { "x": "scenario2", "y": 30},#}
{#            { "x": "scenario3", "y": 35},#}
{#            { "x": "scenario4", "y": 10}#}
{##}
{#        ],#}
{#        [#}
{#            { "x": "base", "y": 10},#}
{#            { "x": "scenario1", "y": 25},#}
{#            { "x": "scenario2", "y": 30},#}
{#            { "x": "scenario3", "y": 40},#}
{#            { "x": "scenario4", "y": 12}#}
{##}
{#        ],#}
{#        [#}
{#            { "x": "base", "y": 30},#}
{#            { "x": "scenario1", "y": 12},#}
{#            { "x": "scenario2", "y": 28},#}
{#            { "x": "scenario3", "y": 16},#}
{#            { "x": "scenario4", "y": 16}#}
{##}
{#        ],#}
{#        [#}
{#            { "x": "base", "y": 25},#}
{#            { "x": "scenario1", "y": 29},#}
{#            { "x": "scenario2", "y": 30},#}
{#            { "x": "scenario3", "y": 35},#}
{#            { "x": "scenario4", "y": 10}#}
{##}
{#        ]#}
{##}
{#    ];#}
    var scenarionames = sampledata[1].map(function(d){return d.scenarioname}),
        numberofscenarios = scenarionames.length, //number of scenarios
        dwellingunittypelabels = sampledata[0].map(function(d){return d.dwellingunittype});

    var stack = d3.layout.stack(),
        layers = stack(sampledata),
        yGroupMax = d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y; }); }),
        yStackMax = d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); });

    var margin = {top: 40, right: 10, bottom: 20, left: 40},
                width = 960 - margin.left - margin.right,
                height = 500 - margin.top - margin.bottom;

    var x = d3.scale.ordinal()
            //.domain(d3.range(m))
            .domain(d3.range(numberofscenarios))
            .rangeRoundBands([30, width], .08);

    var xlabels = d3.scale.ordinal()
        .domain(scenarionames)
        .rangeRoundBands([0, width], .08);

    var y = d3.scale.linear()
            .domain([0, yStackMax])
            .range([height, 0]);

    var color = d3.scale.linear()
            .domain([0, layers.length - 1])
            .range([ "orange","#BD0026"]);

    var xAxis = d3.svg.axis()
            .scale(xlabels)
            .tickSize(0)
            .tickPadding(6)
            .orient("bottom");

    var yAxis = d3.svg.axis()
            .scale(y)
            .tickSize(5)
            .tickPadding(0)
            .orient("left");

    var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var layer = svg.selectAll(".layer")
            .data(layers)
            .enter().append("g")
            .attr("class", "layer")
            .style("fill", function(d, i) { return color(i); })
            .style("stroke","white");


var rect = layer.selectAll("rect")
            .data(function(d) { return d; })
            .enter().append("rect")
            .attr("x", function(d) { return x(d.x); })
            .attr("y", height)
            .attr("width", x.rangeBand())
            .attr("height", 0);

        rect.append("title")
            .attr("x", function(d) { return x(d.x); })
            .attr("y", height)
            .text(function(d) {return d.y;});


    rect.transition()
            .delay(function(d, i) { return i * 10; })
            .attr("y", function(d) { return y(d.y0 + d.y); })
            .attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); });

    svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

    svg.append("g")
            .attr("class", "y axis")
            .attr("transform", "translate("+ margin.left +",0)")
            .text("units")
            .call(yAxis);

var legendmargin = {top: 40, right: 10, bottom: 20, left: 40},
        legendwidth = 960 -30,
        legendheight = 200 - margin.top - margin.bottom;

var legendsvg = d3.select("div").append("svg")
        .attr("width", legendwidth)
        .attr("height", legendheight)
        .append("g");

var legend = legendsvg.selectAll(".legend")
        .data(dwellingunittypelabels.slice()) //copies scenarionames array in reverse order
        .enter().append("g")
        .attr("class", "legend")
        .attr("transform", function(d,i) { return "translate(0," + i * 20 + ")"; });//20 pixel between boxes 'i' is iterator

legend.append("rect")//ads rectangles to legend svg.
        .data(layers)
        .attr("x", legendwidth - 18) //18 pixel boxes (2 pixels between)
        .attr("width", 18)
        .attr("height", 18)
        .style("fill", function(d, i) { return color(i); });//fills with corresponding color

legend.append("text")
        .attr("x", legendwidth - 24) // adds text 24 pixels away from end of svg
        .attr("y", 9)
        .attr("dy", ".35em")
        .style("text-anchor", "end") //right adjust
        .text(function(d) { return d; }); //fills text with name from scenarionames array

d3.selectAll("input").on("change", change);

    var timeout = setTimeout(function() {
        d3.select("input[value=\"grouped\"]").property("checked", true).each(change);
    }, 2000);

    function change() {
        clearTimeout(timeout);
        if (this.value === "grouped") transitionGrouped();
        else transitionStacked();
    }

    function transitionGrouped() {
        y.domain([0, yGroupMax]);

        rect.transition()
                .duration(500)
                .delay(function(d, i) { return i * 10; })
                .attr("x", function(d, i, j) { return x(d.x) + x.rangeBand() / layers.length * j; })
                .attr("width", x.rangeBand() / layers.length)
                .transition()
                .attr("y", function(d) { return y(d.y); })
                .attr("height", function(d) { return height - y(d.y); });
    }

    function transitionStacked() {
        y.domain([0, yStackMax]);

        rect.transition()
                .duration(500)
                .delay(function(d, i) { return i * 10; })
                .attr("y", function(d) { return y(d.y0 + d.y); })
                .attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); })
                .transition()
                .attr("x", function(d) { return x(d.x); })
                .attr("width", x.rangeBand());
    }

    // Inspired by Lee Byron's test data generator.
    function bumpLayer(n, o) {

        function bump(a) {
            var x = 1 / (.1 + Math.random()),
                    y = 2 * Math.random() - .5,
                    z = 10 / (.1 + Math.random());
            for (var i = 0; i < n; i++) {
                var w = (i / n - y) * z;
                a[i] += x * Math.exp(-w * w);
            }
        }

        var a = [], i;
        for (i = 0; i < n; ++i) a[i] = o + o * Math.random();
        for (i = 0; i < 5; ++i) bump(a);
        return a.map(function(d, i) { return {x: i, y: Math.max(0, d)}; });
    }
</script>
</body>
